# backend/core/settings.py
"""
Django settings for core project.
Generated by 'django-admin startproject' using Django 5.2.6.
"""
import os
import dj_database_url  # <-- ADD THIS LINE TO FIX THE ERROR
from dotenv import load_dotenv

load_dotenv()
from pathlib import Path


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# --- Production Security Settings ---
# Load SECRET_KEY from environment variables. Do NOT hardcode in production.
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'django-insecure-jts%a8z8^m*!4dn+8$2fb213vf&b9z&!(az3a_ahj540c7^%#s')

# Set DEBUG to False in production by checking environment variable.
# 'False' (string) will evaluate to True. We check if the value is *not* 'True'.
DEBUG = os.environ.get('DJANGO_DEBUG', 'True') == 'True'

# Load allowed hosts from environment variables. Render provides RENDER_EXTERNAL_HOSTNAME automatically.
ALLOWED_HOSTS = []
RENDER_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
if RENDER_HOSTNAME:
    ALLOWED_HOSTS.append(RENDER_HOSTNAME)


# Application definition
INSTALLED_APPS = [
    'daphne',
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions", # Still needed for Django Admin
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'corsheaders',
    'rest_framework',
    'rest_framework_simplejwt', # <-- Add the new JWT library
    'channels',
    # Our custom app
    'game.apps.GameConfig',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware", # Still needed for Django Admin
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"


# Database
DATABASES = {
    'default': dj_database_url.config(
        # Fallback to your local development database if DATABASE_URL isn't set
        default=f"postgresql://{os.environ.get('DB_USER')}:{os.environ.get('DB_PASSWORD')}@localhost/paper_cricket_db"
    )
}


# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]


# Internationalization
LANGUAGE_CODE = "en-us"
TIME_ZONE = "Asia/Kolkata"
USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
STATIC_URL = "static/"
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Channels
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [os.environ.get('REDIS_URL', 'redis://localhost:6379')],
        },
    },
}

# --- NEW JWT & Simplified CORS Configuration ---

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    # Remove the default permission class so endpoints can be public by default
    # Individual views will specify their own permission requirements
}

# This whitelist is all we need for CORS. The complex cookie/CSRF settings are no longer required.
frontend_url = os.environ.get('FRONTEND_URL', '').rstrip('/')
CORS_ORIGIN_WHITELIST = [
    "http://localhost:3000",
]

if frontend_url:  # Only add if it's not empty
    CORS_ORIGIN_WHITELIST.append(frontend_url)
